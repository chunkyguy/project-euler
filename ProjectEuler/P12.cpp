//
//  P12.cpp
//  ProjectEuler
//
//  Created by Sid on 21/01/14.
//  Copyright (c) 2014 whackylabs. All rights reserved.
//

/* 2:11:22.6
 
 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 
 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 
 Let us list the factors of the first seven triangle numbers:
 
 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 
 We can see that 28 is the first triangle number to have over five divisors.
 
 What is the value of the first triangle number to have over five hundred divisors?
 */

#include <cassert>
#include <iostream>
#include <map>
#include <set>
#include <cmath>

std::map<int, int> g_Tval;
//std::map<int, std::set<int>> g_Divisors;
//
//template <typename T>
//static bool is_prime(const T num)
//{
//  for (T n = 2; n <= sqrt(num); ++n) {
//    if (num % n == 0) {
//      return false;
//    }
//  }
//  return (num <= 1)?false:true;
//}
//
//std::set<int> divisors(const int num)
//{
//  std::map<int, std::set<int>>::iterator it = g_Divisors.find(num);
//  if (it != g_Divisors.end()) {
//    std::cout << num << " reading cache..." << std::endl;
//    return it->second;
//  }
//
//  std::cout << num << " calculating..." << std::endl;
//  std::set<int> divs;
//  divs.insert(num);
//  divs.insert(1);
//  if (is_prime(num) || num == 1) {
//    g_Divisors[num] = divs;
//    return divs;
//  }
//  
//  for (int i = 2; i < num; ++i) {
//    if (num % i == 0) {
//      int a = i;
//      int b = num/i;
//      std::set<int> diva = divisors(a);
//      divs.insert(diva.begin(), diva.end());
//      
//      std::set<int> divb = divisors(b);
//      divs.insert(divb.begin(), divb.end());
//    }
//  }
//
//  
//  g_Divisors[num] = divs;
//  return divs;
////  
////  int f = 1;
////  for (int i = 2; i <= num; ++i) {
////    if (num % i == 0) {
////      f++;
////    }
////  }
////  return f;
//}

int divsor_count(const int num)
{
  if (num == 1) {
    return 1;
  }
  
  int divs = 2;
  int b = num;
  
  for (int a = 2; a < b; ++a) {
    if (num % a == 0) {
      b = num / a;
      divs += 2;
    }
  }
  return divs;
}

int triangle_value(int index)
{
  if (index == 0) {
    return 1;
  }
  
  int tval = 0;
  std::map<int, int>::iterator it = g_Tval.find(index);
  if (it == g_Tval.end()) {
    tval = triangle_value(index-1) + index + 1;
    g_Tval[index] = tval;
  } else {
    tval = it->second;
  }
  
  return tval;
}

int trival_divisors(const int num)
{
  int i = 0;
  int tval;
  do {
    tval  = triangle_value(i++);
  } while (divsor_count(tval) < num);
  
  return tval;
}

int P12_Main()
{
  int tri_vals[7] = {1,3,6,10,15,21,28};
  for (int i = 0; i < sizeof(tri_vals)/sizeof(tri_vals[0]); ++i) {
    assert(triangle_value(i) == tri_vals[i]);
  }
  
  int facts[7] = {1,2,4,4,4,4,6};
  for (int i = 0; i < sizeof(tri_vals)/sizeof(tri_vals[0]); ++i) {
    assert(divsor_count(tri_vals[i]) == facts[i]);
  }
  
//  for (int i = 0; i < sizeof(tri_vals)/sizeof(tri_vals[0]); ++i) {
//    std::set<int> tmp = divisors(tri_vals[i]);
//    for (std::set<int>::iterator it = tmp.begin(); it != tmp.end(); ++it) {
//      std::cout << *it << " ";
//    }
//      std::cout << "[" << tmp.size() << "]" << std::endl;
//  }

  assert(trival_divisors(5) == 28);
  
  std::cout << trival_divisors(500) << std::endl;
  return 0;
}
